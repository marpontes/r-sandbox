WinsReg = lm(W ~ PTSdiff, data=NBA)
summary(WinsReg)
PointsReg = lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + DRB + BLK + TOV + STL, data=NBA)
summary(PointsReg)
PointsReg$residuals#
SSE = sum(PointsReg$residuals^2)#
SSE
RMSE = sqrt(SSE/nrow(NBA))
RMSE
PointsReg3 = lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + STL, data=NBA)
summary(PointsReg3)
SSE = sum(PointsReg3$residuals^2)#
SSE#
RMSE = sqrt(SSE/nrow(NBA))#
RMSE
RegVar = NBA[c("X2PA", "X3PA", "FTA", "AST", "ORB", "STL")]#
cor(RegVar)
NBA_test = read.csv("NBA_test.csv")
PointsPredictions = predict(PointsReg, newdata=NBA_test)
SSE = sum((PointsPredictions - NBA_test$PTS)^2)
SST = sum((mean(NBA$PTS) - NBA_test$PTS)^2)
R2 = 1 - SSE/SST
R2
RMSE = sqrt(SSE/nrow(NBA_test))
RMSE
data(state)
statedata = cbind(data.frame(state.x77), state.abb, state.area, state.center,  state.division, state.name, state.region)
str(statedata)
plot(statedata$x, statedata$y)
plot(statedata$y, statedata$x)
plot(statedata$x, statedata$y)
tapply( statedata$HS.Grad , statedata$state.region,mean )
sort(tapply( statedata$HS.Grad , statedata$state.region,mean ))
?boxplot
boxplot(statedata$Murder,statedate$Region)
boxplot(statedata$Murder, statedata$Region)
boxplot(statedata$Murder ~ statedata$Region)
boxplot(statedata$Murder ~ statedata$Region)
boxplot(statedata$Murder , statedata$Region)
boxplot( statedata$Region ,statedata$Murder)
boxplot( statedata$Region ~ statedata$Murder)
boxplot( statedata$Region ~ statedata$Murder, rm.na=FALSE)
boxplot( statedata$Region ~ statedata$Murder, rm.na=TRUE)
boxplot( statedata$Region , rm.na=TRUE)
boxplot( statedata$state.region ~ statedata$Murder, rm.na=TRUE)
boxplot( statedata$state.region , rm.na=TRUE)
boxplot( statedata$state.region)
boxplot(statedata$Murder)
?boxplot
boxplot(statedata$state.region)
boxplot(statedata$Murderstatedata$state.region)
boxplot(statedata$Murder~statedata$state.region)
?subset
ne = subset(statedata,state.region="Northeast")
plot(ne$state,ne$Murder)
plot(ne$state.name,ne$Murder)
boxplot(ne$Murder~ ne$state.name)
boxplot(ne$Murder~ ne$state.name)
boxplot(ne$Murder~ ne$state.name)
summary(ne)
boxplot(ne$Murder~ ne$state.abb)
boxplot(statedata$Murder~statedata$state.region)
tapply(ne$Murder,ne$state.name,avg)
tapply(ne$Murder,ne$state.name,mean)
order(tapply(ne$Murder,ne$state.name,mean))
sort(tapply(ne$Murder,ne$state.name,mean))
summary(ne)#
summary(statedata)
str(ne)#
str(statedata)
ne = subset(statedata,state.region=="Northeast")
str(ne)
sort(tapply(ne$Murder,ne$state.name,mean))
model = lm(Life.Exp ~ Population + Income + Illiteracy + Murder + HS.Grad + Frost + Area,data=statedata)
summary(model)
plot(statedata$Income,statedata$Life.Exp)
plot(statedata$Income,statedata$Life.Exp)
plot(statedata$Life.Exp, statedata$Income )
plot(statedata$Income,statedata$Life.Exp)
plot(jitter(statedata$Income),jitter(statedata$Life.Exp))
plot(jitter(statedata$Income),jitter(statedata$Life.Exp))
plot(jitter(statedata$Income),jitter(statedata$Life.Exp))
plot(jitter(statedata$Income),jitter(statedata$Life.Exp))
plot(statedata$Income,statedata$Life.Exp)
?jitter
plot(statedata$Income,statedata$Life.Exp)
modeli = lm(Life.Exp ~ Income ,data=statedata)
summary(modeli)
summary(model)
model = lm(Life.Exp ~ Population + Income + Illiteracy + Murder + HS.Grad + Frost,data=statedata)#
summary(model)
model = lm(Life.Exp ~ Population + Income + Murder + HS.Grad + Frost,data=statedata)#
summary(model)
model = lm(Life.Exp ~ Population + Murder + HS.Grad + Frost,data=statedata)#
summary(model)
pred = predict(model)
pred
sort(pred)
?which.min
?which.min(statedata$Life.Exp)
which.min(statedata$Life.Exp)
statedata$state.name[which.min(statedata$Life.Exp)]
sort(pred) #again
statedata$state.name[which.max(statedata$Life.Exp)] # now with max
sort(pred$residuals)
sort(model$residuals)
data = csv.read("climate_change.csv")
data = read.csv("climate_change.csv")
str(data)
training = subset(data,Year <=2006)
str(training)
summary(training)
test = subset(data,Year >2006)#
  summary(test)
str(data)
model = lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI + Aerosols,data=training)#
  str(model)
summary(model)
cor(model)
cor(model)
cor(training)
cor(training$CFC.11)
cor(training$CFC.11,training)
cor(training)
cor(training)
cor(training,training$CFC.11)
cor(training,training$NO2)
cor(training,training$NO2)
cor(training,training$N2O)
modelred = lm(Temp ~ MEI + TSI + Aerosols + N2O,data=training)
summary(modelred)
summary(training)
summary(model)
modelstep = step(model)
summary(modelstep)
predictTemp = predict(modelstep,newdata=test)#
  predictTemp
SSE = sum(  ( test$Temp - predictTemp )^2  )
SST = sum(  ( test$Temp - mean(training$Price))^2 )
mean(training$Price)
SST = sum(  ( test$Temp - mean(training$Temp))^2 )
SSE = sum(  ( test$Temp - predictTemp )^2  )#
  SST = sum(  ( test$Temp - mean(training$Temp))^2 )#
  RS = 1-SSE/SST#
  RS
SSE = sum(  ( test$Temp - predictTemp )^2  )#
  SST = sum(  ( test$Temp - mean(training$Temp))^2 )#
  RS = 1-SSE/SST#
  RS
ptrain = read.csv("pisa2009train.csv")
ptest = read.csv("pisa2009test.csv")
str(ptrain)
tapply(ptrain$readingScore , ptrain$male , average)
tapply(ptrain$readingScore , ptrain$male , mean)
summary(ptrain)
ptrain = na.omit(ptrain)#
ptest = na.omit(ptest)
str(ptrain)
str(ptest)
summary(ptrain)
table(ptest$raceeth)
sort(table(ptest$raceeth))
ptrain$raceeth = relevel(ptrain$raceeth, "White")
ptrain$raceeth = relevel(ptrain$raceeth, "White")
ptest$raceeth = relevel(ptest$raceeth, "White")
lmScore = lm( readingScore ~ . , data=ptrain )
summary(lmScore)
predt = predict(lmScore,newdata=ptest)#
  predt
SSE = sum( (ptest$readingScore - predt)^2 )
SSE
sqrt(4)
rcount(ptest)
nrow(ptest)
RMSE = sqrt( SSE/nrow(ptest) )#
  RMSE
SSE = sum( lmScore$residuals )
RMSE = sqrt( SSE/nrow(ptrain) )
RMSE
SSE = sum( lmScore$residuals^2 )#
  SSE#
  RMSE = sqrt( SSE/nrow(ptrain) )#
  RMSE
summary(lmScore)
predTest = predict(lmScore,newdata=ptest)
predTest
str(predTest)
summary(predTest)
max(predTest) - min(predTest)
SSE = sum(  ( ptest$readingScore - predTest )^2  )#
  SSE
SSE = sum(  ( ptest$readingScore - predTest )^2  )#
  SSE#
  RMSE = sqrt( SSE/nrow(ptest) )#
  RMSE
baseline = sum(ptrain$readingScore)/nrow(ptrain)
baseline
baseline = sum(ptrain$readingScore)/nrow(ptrain)#
  baseline#
  SST = sum( ( predTest - baseline)^2 )#
  SST
SST = sum( ( ptest$readingScore - baseline)^2 )#
  SST
rsquared = 1 - SSE/SST#
  rsquared
FluTrain=read.csv("FluTrain.csv")
summary(FluTrain)
min(FluTrain$Week)
FluTrain$Week[which.min(ILI)]
FluTrain$Week[which.min(FluTrain$ILI)]
FluTrain$Week[which.max(FluTrain$ILI)]#
  FluTrain$Week[which.min(FluTrain$ILI)]
FluTrain$Week[which.max(FluTrain$ILI)]
FluTrain$Week[which.min(FluTrain$ILI)]
FluTrain$Week[which.max(FluTrain$Queries)]
FluTrain$Week[which.max(FluTrain$ILI)]#
  FluTrain$Week[which.max(FluTrain$Queries)]
hist(FluTrain$ILI)
plot(log(FluTrain$ILI),FluTrain$Queries)
plot(log(FluTrain$ILI),FluTrain$Queries)
plot(FluTrain$Queries,log(FluTrain$ILI))
FluTrend1 = lm( log(ILI) ~ Queries , data=FluTrain )#
  summary(FluTrend1)
cor(FluTrend1)
cor(FluTrain)
cor(FluTrain$ILI,FluTrain$Queries)
0.8142115^2
log(1/0.8142115)
exp(-0.5*0.8142115)
cor(FluTrain)
cor(FluTrain$ILI,FluTrain$Queries) #0.8142115
cor(FluTrain$ILI~FluTrain$Queries) #0.8142115
cor(FluTrain$ILI,FluTrain$ILI)
cor(FluTrain$ILI,FluTrain$Queries)
cor(FluTrain$Queries,FluTrain$ILI) #0.8142115
0.8142115^2
log(1/0.8142115)
exp(-0.5*0.8142115)
summary(FluTrend1)
cor(FluTrain$Queries,log(FluTrain$ILI))
0.8420333^2
exp(-0.5*0.8420333)
log(1/0.8420333)
FluTest = read.csv("FluTest.csv")
FluTest = read.csv("FluTest.csv")#
  PredTest1 = exp(predict(FluTrend1, newdata=FluTest))#
  summary(predTest1)
summary(PredTest1)
PredTest1
table(PredTest1)
match("2012-03-11",PredTest1$Week)
PredTest1
str(PredTest1)
FluTrend1 = lm( log(ILI) ~ . , data=FluTrain )#
  summary(FluTrend1)
FluTrend1 = lm( log(ILI) ~ Queries , data=FluTrain )
summary(PredTest1)
match("2012-03-11",FluTest$Week)
match("2012-03-11 - 2012-03-18",FluTest$Week)
match("2012-03-11 - 2012-03-17",FluTest$Week)
PredTest1[match("2012-03-11 - 2012-03-17",FluTest$Week)]
RERR = (FluTest$ILI[match("2012-03-11 - 2012-03-17",FluTest$Week)] - PredTest1[match("2012-03-11 - 2012-03-17",FluTest$Week)])/FluTest$ILI[match("2012-03-11 - 2012-03-17",FluTest$Week)]
RERR
SSE = sum(  ( FluTest$ILI - predTest )^2  )#
  SSE#
  RMSE = sqrt( SSE/nrow(FluTest) )#
  RMSE
SSE = sum(  ( FluTest$ILI - PredTest1 )^2  )#
  SSE#
  RMSE = sqrt( SSE/nrow(FluTest) )#
  RMSE
install.packages("zoo")#
  library(zoo)
ILILag2 = lag(zoo(FluTrain$ILI), -2, na.pad=TRUE)#
  FluTrain$ILILag2 = coredata(ILILag2)
summary(FluTrain)
summary(FluTrain$ILILag2)
plot(log(FluTrain$ILILag2),log(FluTrain$ILI))
FluTrend2
FluTrend2 = lm( log(ILI) ~ Queries + log(ILILag2) , data=FluTrain )#
  summary(FluTrend2)
ILILag2 = lag(zoo(FluTest$ILI), -2, na.pad=TRUE)#
  FluTest$ILILag2 = coredata(ILILag2)
summary(FluTest$ILILag2)
FluTrain[0]
FluTrain[1]
FluTrain$ILI[1]
FluTrain$ILI[0]
FluTrain$ILI[nrow(FluTrain)]
FluTrain$ILI[nrow(FluTrain)-1]
FluTest$ILILag2[1]
FluTest$ILILag2[2]
FluTrain$ILI[nrow(FluTrain)]
FluTrain$ILI[nrow(FluTrain)+1]
FluTrain$ILI[nrow(FluTrain)+10000]
FluTest$ILILag2[1] = FluTrain$ILI[nrow(FluTrain)-1]#
  FluTest$ILILag2[2] = FluTrain$ILI[nrow(FluTrain)]
FluTrain$ILI[nrow(FluTrain)-1]
FluTrain$ILI[nrow(FluTrain)]
PredTest2 = exp(predict(FluTrend2, newdata=FluTest))
summary(PredTest2)
SSE = sum(  ( FluTest$ILI - PredTest2 )^2  )#
  SSE#
  RMSE = sqrt( SSE/nrow(FluTest) )#
  RMSE
