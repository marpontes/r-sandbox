setwd("~/Documents/Pessoal/course_challenges/week06/assignment_doc_cluster")
dailykos = read.csv("dailykos.csv")
str(dailykos)
distances = dist(movies[2:1546], method = "euclidean")
distances = dist(movies[2:1546], method = "euclidean")
distances = dist(dailykos[2:1546], method = "euclidean")
clusterDK = hclust(distances, method = "ward")
plot(clusterDK)
clusterGroups = cutree(clusterDK, k = 7)
str(clusterGroups)
table(clusterGroups)
dailykos$cg = clusterGroups
ds1 = subset(dailykos,cg=1)
ds2 = subset(dailykos,cg=2)
ds3 = subset(dailykos,cg=3)
ds4 = subset(dailykos,cg=4)
ds5 = subset(dailykos,cg=5)
ds6 = subset(dailykos,cg=6)
ds7 = subset(dailykos,cg=7)
ds1 = subset(dailykos,cg==1)
ds2 = subset(dailykos,cg==2)
ds3 = subset(dailykos,cg==3)
ds4 = subset(dailykos,cg==4)
ds5 = subset(dailykos,cg==5)
ds6 = subset(dailykos,cg==6)
ds7 = subset(dailykos,cg==7)
tail(sort(colMeans(h1[-1])))
tail(sort(colMeans(ds1[-1])))
ds1$cg=NULL
tail(sort(colMeans(ds1[-1])))
ds2$cg=NULL
ds3$cg=NULL
ds4$cg=NULL
ds5$cg=NULL
ds6$cg=NULL
ds7$cg=NULL
tail(sort(colMeans(ds1[-1])))
tail(sort(colMeans(ds1[-1])))
tail(sort(colMeans(ds2[-1])))
sort(tail(sort(colMeans(ds2[-1]))))
sort(tail(sort(colMeans(ds1[-1]))))
sort(tail(sort(colMeans(ds2[-1]))))
sort(tail(sort(colMeans(ds3[-1]))))
sort(tail(sort(colMeans(ds4[-1]))))
sort(tail(sort(colMeans(ds5[-1]))))
sort(tail(sort(colMeans(ds6[-1]))))
sort(tail(sort(colMeans(ds7[-1]))))
# 2.1 K-MEANS
set.seed(1000)
dailykos$cg = NULL
healthyMatrix = as.matrix(healthy[2:1546])
healthyMatrix = as.matrix(dailykos[2:1546])
kosMatrix = as.matrix(dailykos[2:1546])
kosVector = as.vector(kosMatrix)
k=7
KMC = kmeans(dailykos[2:1546], centers = k)
str(KMC)
table(KMC$cluster)
sort(table(KMC$cluster))
kmcClusters = KMC$cluster
dailykos$kmcCluster = kmcClusters
ds1 = subset(dailykos,kmcCluster==1)
ds2 = subset(dailykos,kmcCluster==2)
ds3 = subset(dailykos,kmcCluster==3)
ds4 = subset(dailykos,kmcCluster==4)
ds5 = subset(dailykos,kmcCluster==5)
ds6 = subset(dailykos,kmcCluster==6)
ds7 = subset(dailykos,kmcCluster==7)
sort(tail(sort(colMeans(ds1[-1]))))
sort(tail(sort(colMeans(ds2[-1]))))
sort(tail(sort(colMeans(ds3[-1]))))
sort(tail(sort(colMeans(ds4[-1]))))
sort(tail(sort(colMeans(ds5[-1]))))
sort(tail(sort(colMeans(ds6[-1]))))
sort(tail(sort(colMeans(ds7[-1]))))
ds1$kmcCluster = NULL
ds2$kmcCluster = NULL
ds3$kmcCluster = NULL
ds4$kmcCluster = NULL
ds5$kmcCluster = NULL
ds6$kmcCluster = NULL
ds7$kmcCluster = NULL
sort(tail(sort(colMeans(ds1[-1]))))
sort(tail(sort(colMeans(ds2[-1]))))
sort(tail(sort(colMeans(ds3[-1]))))
sort(tail(sort(colMeans(ds4[-1]))))
sort(tail(sort(colMeans(ds5[-1]))))
sort(tail(sort(colMeans(ds6[-1]))))
sort(tail(sort(colMeans(ds7[-1]))))
table(clusterGroups, KMC$cluster)
setwd("~/Documents/Pessoal/course_challenges/week06/assignment_market_segmentation")
airlines = read.csv("AirlinesCluster.csv")
str(airlines)
summary(airlines)
packages(caret)
package(caret)
library(caret)
preproc = preProcess(airlines)
airlinesNorm = predict(preproc, airlines)
max(airlinesNorm)
summary(airlinesNorm)
distances = dist(airlinesNorm, method = "euclidean")
cluster = hclust(distances, method = "ward")
plot(cluster)
clusterGroups = cutree(cluster, k = 5)
table(clusterGroups)
tapply(airlines$Balance, clusterGroups, mean)
tapply(airlines$QualMiles, clusterGroups, mean)
tapply(airlines$BonusMiles, clusterGroups, mean)
tapply(airlines$BonusTrans, clusterGroups, mean)
tapply(airlines$FlightMiles, clusterGroups, mean)
tapply(airlines$FlightTrans, clusterGroups, mean)
tapply(airlines$DaysSinceEnroll, clusterGroups, mean)
sort(tapply(airlines$Balance, clusterGroups, mean))
sort(tapply(airlines$QualMiles, clusterGroups, mean))
sort(tapply(airlines$BonusMiles, clusterGroups, mean))
sort(tapply(airlines$BonusTrans, clusterGroups, mean))
sort(tapply(airlines$FlightMiles, clusterGroups, mean))
sort(tapply(airlines$FlightTrans, clusterGroups, mean))
sort(tapply(airlines$DaysSinceEnroll, clusterGroups, mean))
sort(tapply(airlines$Balance, clusterGroups, mean))
sort(tapply(airlines$QualMiles, clusterGroups, mean))
sort(tapply(airlines$BonusMiles, clusterGroups, mean))
sort(tapply(airlines$BonusTrans, clusterGroups, mean))
sort(tapply(airlines$FlightMiles, clusterGroups, mean))
sort(tapply(airlines$FlightTrans, clusterGroups, mean))
sort(tapply(airlines$DaysSinceEnroll, clusterGroups, mean))
set.seed(88)
KMC = kmeans(airlinesNorm, centers = k,iter.max = 1000)
k=5
KMC = kmeans(airlinesNorm, centers = k,iter.max = 1000)
str(KMC)
sort(table(KMC$cluster))
kmeansClust$centers
KMC$centers
setwd("~/Documents/Pessoal/course_challenges/week06/assignment_medical")
claims = read.csv("reimbursement.csv")
str(claims)
table(claims$alzheimers+ claims$arthritis+
claims$cancer+ claims$copd+
claims$depression+ claims$diabetes+
claims$heart.failure+ claims$ihd+
claims$kidney+
claims$osteoporosis+ claims$stroke >0)
280427+(177578+280427 )
280427/(177578+280427 )
cor(claims)
cor(claims[1:12])
cor(claims[1:12])
cor(claims[1:12])
plot(  cor(claims[1:12]))
image(cor(claims[1:12]), axes = FALSE, col=rainbow(k))
max(cor(claims[1:12]))
sort(cor(claims[1:12]))
hist(claims$reimbursement2009)
claims$reimbursement2008 = log(claims$reimbursement2008+1)
claims$reimbursement2009 = log(claims$reimbursement2009+1)
hist(claims$reimbursement2009)
table(claims$reimbursement2009)
table(claims$reimbursement2009--0)
table(claims$reimbursement2009==1)
table(claims$reimbursement2009==0)
90498/(367507 + 90498)
set.seed(144)
spl = sample(1:nrow(claims), size=0.7*nrow(claims))
train = claims[spl,]
test = claims[-spl,]
lmclaim = lm(reimbursement2009 ~ .,data=train)
summary(lmclaim)
lmpred = predict(lmclaim)
sum(  ( train$reimbursement2009 - lmpred )^2  )
SSE = sum(  ( train$reimbursement2009 - lmpred )^2  )
SSE
RMSE = sqrt( SSE/nrow(train) )
RMSE
baseline = mean(train$reimbursement2009)
baseline
SSE2 = sum(  ( test$reimbursement2009 - baseline )^2  )
SSE2
RMSE2 = sqrt( SSE2/nrow(test) )
RMSE2
baseline2 = test$reimbursement2008
# SSE baseline testing set
SSE3 = sum(  ( test$reimbursement2009 - baseline2 )^2  )
SSE3
RMSE3 = sqrt( SSE3/nrow(test) )
RMSE3
train.limited = train
train.limited$reimbursement2009 = NULL
test.limited = test
test.limited$reimbursement2009 = NULL
library(caret)
preproc = preProcess(train.limited)
train.norm = predict(preproc, train.limited)
test.norm = predict(preproc, test.limited)
mean(train.norm$arthritis)
mean(test.norm$arthritis)
k=3
set.seed(144)
set.seed(144)
set.seed(144)
km = kmeans(train.norm, centers = k,iter.max = 1000)
str(km)
km$centers
table(km$cluster)
sort(tapply(train$age, km$cluster, mean))
sort(tapply(train$age, km$cluster, mean))
sort(tapply(train$alzheimers, km$cluster, mean))
sort(tapply(train$arthritis, km$cluster, mean))
sort(tapply(train$cancer, km$cluster, mean))
sort(tapply(train$copd, km$cluster, mean))
sort(tapply(train$depression, km$cluster, mean))
sort(tapply(train$diabetes, km$cluster, mean))
sort(tapply(train$heart.failure, km$cluster, mean))
sort(tapply(train$ihd, km$cluster, mean))
sort(tapply(train$kidney, km$cluster, mean))
sort(tapply(train$osteoporosis, km$cluster, mean))
sort(tapply(train$stroke, km$cluster, mean))
sort(tapply(train$reimbursement2008, km$cluster, mean))
sort(tapply(train$age, km$cluster, mean))
sort(tapply(train$stroke, km$cluster, mean))
sort(tapply(train$reimbursement2008, km$cluster, mean))
mean(train$age)
mean(train$stroke)
mean(train$reimbursement2008)
sort(tapply(train.norm$age, km$cluster, mean))
sort(tapply(train.norm$stroke, km$cluster, mean))
sort(tapply(train.norm$reimbursement2008, km$cluster, mean))
mean(train.norm$age)
mean(train.norm$stroke)
mean(train.norm$reimbursement2008)
library(flexclust)
km.kcca = as.kcca(km, train.norm)
cluster.train = predict(km.kcca)
cluster.test = predict(km.kcca, newdata=test.norm)
str(cluster.test)
table(cluster.test)
train1 = subset(cluster.train==1,train)
train1 = subset(train,cluster.train==1)
train2 = subset(train,cluster.train==2)
train3 = subset(train,cluster.train==3)
test1 = subset(test,cluster.test==1)
test2 = subset(test,cluster.test==2)
test3 = subset(test,cluster.test==3)
c(1,2,3)
sort(c(mean(train1$reimbursement2009),
mean(train2$reimbursement2009),
mean(train3$reimbursement2009)))
mean(train1$reimbursement2009)
mean(train2$reimbursement2009)
mean(train3$reimbursement2009)
lm1 = lm(reimbursement2009 ~ . , data=train1)
lm2 = lm(reimbursement2009 ~ . , data=train2)
lm3 = lm(reimbursement2009 ~ . , data=train3)
summary(lm1)
summary(lm2)
summary(lm3)
pred.test1 = predict(lm1, newdata=test1)
pred.test2 = predict(lm2, newdata=test2)
pred.test3 = predict(lm3, newdata=test3)
mean(pred.test1)
mean(pred.test2)
mean(pred.test3)
RMSE01 = sqrt( (sum(  ( test1$reimbursement2009 - pred.test1 )^2  ))/nrow(test1) )
RMSE02 = sqrt( (sum(  ( test2$reimbursement2009 - pred.test2 )^2  ))/nrow(test2) )
RMSE03 = sqrt( (sum(  ( test3$reimbursement2009 - pred.test3 )^2  ))/nrow(test3) )
RMSE01
RMSE02
RMSE03
all.predictions = c(pred.test1, pred.test2, pred.test3)
all.outcomes = c(test1$reimbursement2009, test2$reimbursement2009, test3$reimbursement2009)
RMSE.all = sqrt( (sum(  ( all.outcomes - all.predictions )^2  ))/nrow(all.outcomes) )
RMSE.all
sqrt( (sum(  ( all.outcomes - all.predictions )^2  ))/nrow(all.outcomes) )
SSE.all = sum(  ( all.outcomes - all.predictions )^2
SSE.all
SSE.all = sum(  ( all.outcomes - all.predictions )^2 )
SSE.all
sqrt( SSE.all/nrow(all.outcomes) )
all.predictions[1]
all.outcomes[1]
SSE.all
nrow(all.outcomes)
count(all.outcomes)
size(all.outcomes)
str(all.outcomes)
sqrt( SSE.all/137402 )
