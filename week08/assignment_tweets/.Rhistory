setwd("~/Documents/Pessoal/course_challenges/week08/lecture_WHO")
WHO = read.csv("WHO.csv")
str(WHO)
# Plot from Week 1
plot(WHO$GNI, WHO$FertilityRate)
# Let's redo this using ggplot
# Install and load the ggplot2 library:
install.packages("ggplot2")
library(ggplot2)
# Create the ggplot object with the data and the aesthetic mapping:
scatterplot = ggplot(WHO, aes(x = GNI, y = FertilityRate))
# Add the geom_point geometry
scatterplot + geom_point()
# Make a line graph instead:
scatterplot + geom_line()
# Switch back to our points:
scatterplot + geom_point()
# Redo the plot with blue triangles instead of circles:
scatterplot + geom_point(color = "blue", size = 3, shape = 17)
# Another option:
scatterplot + geom_point(color = "darkred", size = 3, shape = 8)
# Add a title to the plot:
scatterplot + geom_point(colour = "blue", size = 3, shape = 17) + ggtitle("Fertility Rate vs. Gross National Income")
# Save our plot:
fertilityGNIplot = scatterplot + geom_point(colour = "blue", size = 3, shape = 17) + ggtitle("Fertility Rate vs. Gross National Income")
pdf("MyPlot.pdf")
print(fertilityGNIplot)
dev.off()
fertilityGNIplot = scatterplot + geom_point(colour = "blue", size = 3, shape = 15) + ggtitle("Fertility Rate vs. Gross National Income")
scatterplot + geom_point(color = "blue", size = 3, shape = 15)
# Another option:
scatterplot + geom_point(color = "darkred", size = 3, shape = 8)
# Add a title to the plot:
scatterplot + geom_point(colour = "blue", size = 3, shape = 17) + ggtitle("Fertility Rate vs. Gross National Income")
# Save our plot:
fertilityGNIplot = scatterplot + geom_point(colour = "blue", size = 3, shape = 15) + ggtitle("Fertility Rate vs. Gross National Income")
pdf("MyPlot.pdf")
print(fertilityGNIplot)
dev.off()
# VIDEO 5 - MORE ADVANCED SCATTERPLOTS
# Color the points by region:
ggplot(WHO, aes(x = GNI, y = FertilityRate, color = Region)) + geom_point()
# Color the points according to life expectancy:
ggplot(WHO, aes(x = GNI, y = FertilityRate, color = LifeExpectancy)) + geom_point()
# Is the fertility rate of a country was a good predictor of the percentage of the population under 15?
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point()
# Let's try a log transformation:
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point()
# Simple linear regression model to predict the percentage of the population under 15, using the log of the fertility rate:
mod = lm(Under15 ~ log(FertilityRate), data = WHO)
summary(mod)
# Add this regression line to our plot:
mod=NULL
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm")
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm", level = 0.99)
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm", se = FALSE)
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm", colour = "orange")
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point() + scale_color_brewer(palette="Dark2")
scatter2 = ggplot(WHO, aes(x = FertilityRate, y = Under15))
scatter2 + geom_point() + scale_color_brewer(palette="Dark2")
scatterplot = ggplot(WHO, aes(x = GNI, y = FertilityRate))
# Add the geom_point geometry
scatterplot + geom_point()
# Make a line graph instead:
scatterplot + geom_line()
# Switch back to our points:
scatterplot + geom_point()
# Redo the plot with blue triangles instead of circles:
scatterplot + geom_point(color = "blue", size = 3, shape = 15)
# Another option:
scatterplot + geom_point(color = "darkred", size = 3, shape = 8)
# Add a title to the plot:
scatterplot + geom_point(colour = "blue", size = 3, shape = 17) + ggtitle("Fertility Rate vs. Gross National Income")
# Save our plot:
fertilityGNIplot = scatterplot + geom_point(colour = "blue", size = 3, shape = 15) + ggtitle("Fertility Rate vs. Gross National Income")
pdf("MyPlot.pdf")
print(fertilityGNIplot)
dev.off()
# VIDEO 5 - MORE ADVANCED SCATTERPLOTS
# Color the points by region:
ggplot(WHO, aes(x = GNI, y = FertilityRate, color = Region)) + geom_point()
scatter2 = ggplot(WHO, aes(x = FertilityRate, y = Under15, color=Region))
scatter2 + geom_point() + scale_color_brewer(palette="Dark2")
setwd("~/Documents/Pessoal/course_challenges/week08/lecture_mvt")
mvt = read.csv("mvt.csv", stringsAsFactors=FALSE)
str(mvt)
# Convert the Date variable to a format that R will recognize:
mvt$Date = strptime(mvt$Date, format="%m/%d/%y %H:%M")
# Extract the hour and the day of the week:
mvt$Weekday = weekdays(mvt$Date)
mvt$Hour = mvt$Date$hour
# Let's take a look at the structure of our data again:
str(mvt)
# Create a simple line plot - need the total number of crimes on each day of the week. We can get this information by creating a table:
table(mvt$Weekday)
# Save this table as a data frame:
WeekdayCounts = as.data.frame(table(mvt$Weekday))
str(WeekdayCounts)
# Load the ggplot2 library:
library(ggplot2)
# Create our plot
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1))
# Make the "Var1" variable an ORDERED factor variable
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday"))
# Try again:
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1))
# Change our x and y labels:
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1)) + xlab("Day of the Week") + ylab("Total Motor Vehicle Thefts")
# VIDEO 4 - Adding the Hour of the Day
# Create a counts table for the weekday and hour:
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1), linetype=2)+ xlab("Day of the Week") + ylab("Total Motor Vehicle Thefts")
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1), alpha=0.3)+ xlab("Day of the Week") + ylab("Total Motor Vehicle Thefts")
table(mvt$Weekday, mvt$Hour)
DayHourCounts = as.data.frame(table(mvt$Weekday, mvt$Hour))
str(DayHourCounts)
DayHourCounts$Hour = as.numeric(as.character(DayHourCounts$Var2))
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1))
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Var1), size=2)
DayHourCounts$Type = ifelse((DayHourCounts$Var1 == "Sunday") | (DayHourCounts$Var1 == "Saturday"), "Weekend", "Weekday")
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Type), size=2)
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Type), size=2, alpha=0.5)
DayHourCounts$Var1 = factor(DayHourCounts$Var1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq))
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq)) + scale_fill_gradient(name="Total MV Thefts") + theme(axis.title.y = element_blank())
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq)) + scale_fill_gradient(name="Total MV Thefts", low="white", high="red") + theme(axis.title.y = element_blank())
# VIDEO 5 - Maps
# Install and load two new packages:
install.packages("maps")
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq)) + scale_fill_gradient(name="Total MV Thefts", low="white", high="black") + theme(axis.title.y = element_blank())
install.packages("ggmap")
library(maps)
library(ggmap)
chicago = get_map(location = "chicago", zoom = 11)
ggmap(chicago)
ggmap(chicago) + geom_point(data = mvt[1:100,], aes(x = Longitude, y = Latitude))
# Round our latitude and longitude to 2 digits of accuracy, and create a crime counts data frame for each area:
LatLonCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2)))
str(LatLonCounts)
# Convert our Longitude and Latitude variable to numbers:
LatLonCounts$Long = as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat = as.numeric(as.character(LatLonCounts$Var2))
# Plot these points on our map:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq))
# Change the color scheme:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq)) + scale_colour_gradient(low="yellow", high="red")
# We can also use the geom_tile geometry
ggmap(chicago) + geom_tile(data = LatLonCounts, aes(x = Long, y = Lat, alpha = Freq), fill="red")
LatLonCounts2 = subset(LatLonCounts,Freq>0)
ggmap(chicago) + geom_tile(data = LatLonCounts2, aes(x = Long, y = Lat, alpha = Freq), fill="red")
str(LatLonCounts2)
count(LatLonCounts2)
nrow(LatLonCounts2)
nrow(LatLonCounts)-nrow(LatLonCounts2)
murders = read.csv("murders.csv")
str(murders)
# Load the map of the US
statesMap = map_data("state")
str(statesMap)
# Plot the map:
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black") + coord_map("mercator")
# Create a new variable called region with the lowercase names to match the statesMap:
murders$region = tolower(murders$State)
# Join the statesMap data and the murders data into one dataframe:
murderMap = merge(statesMap, murders, by="region")
str(murderMap)
# Plot the number of murder on our map of the United States:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Murders)) + geom_polygon(colour = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Murders)) + geom_polygon(colour = "black") + scale_fill_gradient(low = "white", high = "red", guide = "legend")
# Plot a map of the population:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Population)) + geom_polygon(colour = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
# Create a new variable that is the number of murders per 100,000 population:
murderMap$MurderRate = murderMap$Murders / murderMap$Population * 100000
# Redo our plot with murder rate:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) + geom_polygon(colour = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
# Redo the plot, removing any states with murder rates above 10:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) + geom_polygon(colour = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend", name = "Murder Rate per 100k", limits = c(0.9,10))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) + geom_polygon(colour = "black") + scale_fill_gradient(low = "white", high = "red", guide = "legend", name = "Murder Rate per 100k", limits = c(0.9,10))
murderMap$GunOwnershipRate = murderMap$GunOwnership / murderMap$Population * 100000
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnershipRate)) + geom_polygon(colour = "black") + scale_fill_gradient(low = "white", high = "red", guide = "legend", name = "Murder Rate per 100k", limits = c(0.9,10))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnershipRate)) + geom_polygon(colour = "black") + scale_fill_gradient(low = "white", high = "red", guide = "legend", name = "Murder Rate per 100k")
table(murderMap$region,murderMap$GunOwnershipRate)
sort(table(murderMap$region,murderMap$GunOwnershipRate))
table(murderMap$region,murderMap$GunOwnershipRate)
murderMap$GunOwnershipRate = (murderMap$GunOwnership / murderMap$Population)*1000
table(murderMap$region,murderMap$GunOwnershipRate)
str(murderMao)
str(murderMap)
tapply(murderMap$region,murderMap$GunOwnershipRate, mean)
tapply(murderMap$GunOwnershipRate,murderMap$region, mean)
sort(tapply(murderMap$GunOwnershipRate,murderMap$region, mean))
library(ggplot2)
library(ggmap)
str(statesMap)
table( statesMap$groups)
table( statesMap$group)
nrow(table( statesMap$group))
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black") + coord_map("mercator")
setwd("~/Documents/Pessoal/course_challenges/week08/assignment_elections")
polling = read.csv("PollingImputed.csv")
str(polling)
table(polling$Year)
Train = subset(polling,Year<2012)
str(Train)
Test = subset(polling,Year=2012)
str(Test)
Test = subset(polling,Year==2012)
str(Test)
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train, family="binomial")
TestPrediction = predict(mod2, newdata=Test, type="response")
TestPredictionBinary = as.numeric(TestPrediction > 0.5)
predictionDataFrame = data.frame(TestPrediction, TestPredictionBinary, Test$State)
table(predictionDataFrame$TestPredictionBinary,Test$State)
table(predictionDataFrame$TestPredictionBinary)
table(TestPrediction)
mean(TestPrediction)
table(predictionDataFrame$TestPredictionBinary)
predictionDataFrame$region = tolower(predictionDataFrame$Test.State)
predictionMap = merge(statesMap, predictionDataFrame, by = "region")
predictionMap = predictionMap[order(predictionMap$order),]
str(predictionMap)
str(statesMap)
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary)) + geom_polygon(color = "black")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
str(predictionDataFrame)
?match
predictionDataFrame
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
?geom_polygon
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary, linetype=3))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
?linetype
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary, linetype="dotdash"))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary), linetype="dotdash")+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary, size=3))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary,linetype=3))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
setwd("~/Documents/Pessoal/course_challenges/week08/assignment_parole")
parole = read.csv("parole.csv")
parole = read.csv("parole.csv")
parole$male = as.factor(parole$male)
parole$state = as.factor(parole$state)
parole$crime = as.factor(parole$crime)
str(parole)
?match
match(parole$male==0,parole )
nrow(match(parole$male==0,parole ))
match(male==0,parole )
match(parole$male==0)
match(parole$male==0, parole$male)
match(parole$male=0, parole$male)
match(parole$male==0, parole$male)
str(parole)
nrow(subset(parole,male=0))/nrow(parole)
nrow(subset(parole,male=0))/nrow(parole)
nrow(subset(parole,male==0))/nrow(parole)
table(parole$male)
130/(130+545)
parole = read.csv("parole.csv")
nrow(subset(parole,male==0))/nrow(parole)
parole = read.csv("parole.csv")
parole$male = as.factor(parole$male)
parole$state = as.factor(parole$state)
parole$crime = as.factor(parole$crime)
str(parole)
nrow(subset(parole,male==0))/nrow(parole)
table(parole$male)
130/(130+545)
nrow(subset(parole,male==0 && violator==1))/nrow(subset(parole, violator==1)
nrow(subset(parole,male==0 && violator==1))/nrow(subset(parole, violator==1))
subset(parole,male==0 && violator==1)
nrow(subset(parole, violator==1)
nrow(subset(parole, violator==1))
str(parole)
table(parole$male, parole$violator)
nrow(subset(parole,male==0 & violator==1))
nrow(subset(parole,male==0 & violator==1))/nrow(subset(parole, violator==1))
14/(14+64)
table( subset(parole,state=="Kentucky")$state, subset(parole,state=="Kentucky")$crime )
table( parole$state, parole$crime )
str(parole)
table( parole$state, parole$crime )
table( parole$state )
parole = read.csv("parole.csv")
parole$male = as.factor(parole$male)
parole$state = as.factor(parole$state)
parole$crime = as.factor(parole$crime)
table( parole$state )
parole = read.csv("parole.csv")
table( parole$state )
str(parole)
r
r
r
r
r
parole = read.csv("parole.csv")
parole$male = as.factor(parole$male)
parole$state = as.factor(parole$state)
parole$crime = as.factor(parole$crime)
str(parole)
table( parole$state , parole$violator)
table( parole$state , parole$crime)
ggplot(data = parole, aes(x = age)) + geom_histogram()
ggplot(data = parole, aes(x = age)) + geom_histogram(binwidth = 5)
ggplot(data = parole, aes(x = age)) + geom_histogram(binwidth = 5,color="blue")
ggplot(data = parole, aes(x = age)) + geom_histogram(binwidth = 5) + facet_grid(male ~ .)
ggplot(data = parole, aes(x = age)) + geom_histogram(binwidth = 5) + facet_grid(.~male)
ggplot(data = parole, aes(x = age, fill = male)) + geom_histogram(binwidth = 5)
ggplot(data = parole, aes(x = age, fill = male)) + geom_histogram(binwidth = 5,position="identity",alpha=0.5)
ggplot(data = parole, aes(x = time.served, fill = male)) + geom_histogram(binwidth = 1,position="identity",alpha=0.5)
ggplot(data = parole, aes(x = time.served, fill = male)) + geom_histogram(binwidth = 1,position="identity",alpha=0.5)
ggplot(data = parole, aes(x = time.served, fill = male)) + geom_histogram(binwidth = 0.1,position="identity",alpha=0.5)
ggplot(data = parole, aes(x = time.served, fill = male)) + geom_histogram(binwidth = 1,position="identity",alpha=0.5) + facet_grid()
?facet_grid
ggplot(data = parole, aes(x = time.served, fill = male)) + geom_histogram(binwidth = 1,position="identity",alpha=0.5) + facet_grid(~.crime)
ggplot(data = parole, aes(x = time.served, fill = male)) + geom_histogram(binwidth = 1,position="identity",alpha=0.5) + facet_grid(.~crime)
ggplot(data = parole, aes(x = time.served, fill = male)) + geom_histogram(binwidth = 1,position="identity",alpha=0.5) + facet_grid(crime~.)
ggplot(data = parole, aes(x = time.served, fill = crime)) + geom_histogram(binwidth = 1,position="identity",alpha=0.5)
setwd("~/Documents/Pessoal/course_challenges/week08/assignment_facebook")
edges = read.csv("edges.csv")
str(edges)
users = read.csv("users.csv")
str(users)
all = rbind(edges$V1,edges$V2)
nrow(all)
all
edges$V1
?rbind
edges$V1[,1]
edges$V1[1,]
edges$V1
?union
all = union(edges$V1,edges$V2)
all
?unionall
all = c(edges$V1,edges$V2)
all
table(all)
table(all)[,2]
?as.frame
?as.dataframe
?as.data.frame
allDF = as.data.frame(table(all))
allDF
str(allDF)
mean(allDF$Freq)
allDF
sum(allDF$Freq)
nrow(allDF$Freq)
str(users)
table(users$school)
table(users$locale, users$school)
table(users$gender, users$school)
install.packages("igraph")
library(igraph)
g = graph.data.frame(users, FALSE, edges)
g = graph.data.frame(edges, FALSE, users)
g = graph.data.frame(edges, TRUE, users)
g = graph.data.frame(users, TRUE, edges)
g = graph.data.frame(edges, FALSE, users)
g = graph.data.frame(edges, TRUE, users)
?graph.data.frame
plot(g, vertex.size=5, vertex.label=NA)
degree(g)
sort(degree(g))
frs = degree(g)
frs[,2]
frs[,1]
frs[2,]
frs[1,]
frs
str(frs)
mean(frs)
V(g)$size = degree(g)/2+2
plot(g, vertex.label=NA)
max(V(g)$size)
min(V(g)$size)
V(g)$color = "black"
V(g)$color[V(g)$gender == "A"] = "red"
V(g)$color[V(g)$gender == "B"] = "gray"
plot(g, vertex.label=NA)
V(g)$color = "black"
V(g)$color[V(g)$school == "A"] = "red"
V(g)$color[V(g)$school == "B"] = "gray"
plot(g, vertex.label=NA)
V(g)$color = "green"
V(g)$color[V(g)$school == "A"] = "red"
V(g)$color[V(g)$school == "B"] = "gray"
plot(g, vertex.label=NA)
table(  V(g)$school)
V(g)$color = "green"
V(g)$color[V(g)$school == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "gray"
plot(g, vertex.label=NA)
table(  V(g)$locale)
V(g)$color = "black"
V(g)$color[V(g)$locale == "A"] = "red"
V(g)$color[V(g)$locale == "B"] = "green"
plot(g, vertex.label=NA)
table(  V(g)$locale)
?igraph.plotting
setwd("~/Documents/Pessoal/course_challenges/week08/assignment_tweets")
tweets = read.csv("tweets.csv")
corpus = Corpus(VectorSource(tweets$Tweet))
library(SnowballC)
library(tm)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
dtm = DocumentTermMatrix(corpus)
allTweets = as.data.frame(dtm)
allTweets = as.data.frame(as.matrix(dtm)
str(allTweets)
allTweets = as.data.frame(as.matrix(dtm)
str(allTweets)
allTweets = as.data.frame(as.matrix(dtm))
str(allTweets)
install.package("wordcloud")
install.packages("wordcloud")
library("wordcloud")
?wordcloud
wordcloud(rownames(allTweets),colsums(allTweets))
wordcloud(rownames(allTweets),colSums(allTweets))
wordcloud(,colSums(allTweets),rownames(allTweets))
wordcloud(colSums(allTweets),rownames(allTweets))
wordcloud(rownames(allTweets),colSums(allTweets))
wordcloud(rownames(allTweets),rowSums(allTweets))
wordcloud(rownames(allTweets),colSums(allTweets))
allTweets[1]
allTweets[[1]
]
read.csv("tweets.csv")[1]
tweets = read.csv("tweets.csv")
corpus = Corpus(VectorSource(tweets$Tweet))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus[1]
corpus
corpus[[1]]
dtm = DocumentTermMatrix(corpus)
allTweets = as.data.frame(as.matrix(dtm))
str(allTweets)
wordcloud(rownames(allTweets),colSums(allTweets))
wordcloud(colNames(allTweets),colSums(allTweets))
wordcloud(colnames(allTweets),colSums(allTweets))
corpus = Corpus(VectorSource(tweets$Tweet))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
stopwords("english")
c(stopwords("english"),"apple")
corpus <- tm_map(corpus, removeWords, c(stopwords("english"),"apple"))
wordcloud(colnames(allTweets),colSums(allTweets))
corpus = Corpus(VectorSource(tweets$Tweet))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, c(stopwords("english"),"apple"))
dtm = DocumentTermMatrix(corpus)
allTweets = as.data.frame(as.matrix(dtm))
wordcloud(colnames(allTweets),colSums(allTweets))
?wordcloud
wordcloud(colnames(allTweets),colSums(allTweets), random.order=FALSE)
display.brewer.all()
wordcloud(colnames(allTweets),colSums(allTweets), random.order=FALSE,colors=brewer.pal(9, "Blues"))
wordcloud(colnames(allTweets),colSums(allTweets), random.order=FALSE,colors=brewer.pal(9, "Blues")[c(-1, -2, -3, -4)]])
wordcloud(colnames(allTweets),colSums(allTweets), random.order=FALSE,colors=brewer.pal(9, "Blues")[c(-1, -2, -3, -4)])
wordcloud(colnames(allTweets),colSums(allTweets),colors=brewer.pal(9, "Blues")[c(5, 6, 7, 8, 9)])
