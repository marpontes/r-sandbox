sd(c(5,8,12))
which.min(c(4,1,6))
sq.root=2
ls()
sq.root
sq_root=4
sq_root
ls()
sq root=2
demo
demo()
colors()
sd(c(5,8,12))
which.min(c(4,1,6))
c(4,1,6)
min(c(4,1,6))
which?
?which
exit
quit
quit()
letters = read.csv("letters_ABPR.csv")
letters$isB = as.factor(letters$letter == "B")
library(caTools)
set.seed(1000)
split = sample.split(letters$isB, SplitRatio = 0.5)
train = subset(letters, split==TRUE)
test = subset(letters, split==FALSE)
library(rpart)
library(rpart.plot)
CARTb = rpart(isB ~ . - letter, data=train, method="class")
pred01 = predict(CARTb, newdata=test, type="class")
table(pred01)
1161/(397 + 1161)
letters = read.csv("letters_ABPR.csv")
letters$isB = as.factor(letters$letter == "B")
set.seed(1000)
split = sample.split(letters$isB, SplitRatio = 0.5)
train = subset(letters, split==TRUE)
test = subset(letters, split==FALSE)
CARTb = rpart(isB ~ . - letter, data=train, method="class")
pred01 = predict(CARTb, newdata=test, type="class")
table(pred01)
table(train$isB,pred01)
(880+ 102)/(880+ 102+ 281+ 295)
table(test$isB,pred01)
(1118 + 340)/(1118 + 340+ 43+ 57)
install.packages("randomForest")
library(randomForest)
set.seed(1000)
bForest = randomForest(isB ~ . - letter, data = train )
PredictForest = predict(bForest, newdata = test)
table(test$isB, PredictForest)
(1165+374)/(1165+374+9+10)
letters$letter = as.factor( letters$letter )
set.seed(2000)
lsplit = sample.split(letters$letter, SplitRatio = 0.5)
ltrain = subset(letters, lsplit==TRUE)
ltest = subset(letters, lsplit==FALSE)
table(ltest$letter)
401/(395 +383 +401 +379)
str(ltrain)
CART = rpart(letter ~ . -isB, data=ltrain, method="class")
predCART = predict(CART, newdata=ltest, type="class")
table(test$letter, predCART)
(101+ 89+ 98+ 127)/nrow(ltest)
table(ltest$letter, predCART)
(348 + 318 + 363 + 340)/nrow(ltest)
set.seed(1000)
forest = randomForest(letter ~ . - isB, data = ltrain )
randomPred = predict(forest, newdata = ltest)
table(ltest$letter, randomPred)
(390+380+393+364)/nrow(ltest)
data(state)
statedata = data.frame(state.x77)
str(statedata)
linearmodel = lm(Life.Exp ~ . ,data= statedata)
str(linearModel)
str(linearmodel)
summary(linearmodel)
linearpred = predict(linearmodel)
SSE = sum(linearmodel$residuals^2)#
SSE
linearmodel02 = lm(Life.Exp ~ Population + Murder + Frost + HS.Grad,data=statedata)#
summary(linearmodel02)
SSE2 = sum(linearmodel02 $residuals^2)#
SSE2
CART = rpart(Life.Exp ~ . , data= statedata)
prp(CART)
pred = predict(CART)
summary(pred)
SSE3 = sum(pred$residuals^2)
SSE3 = sum(CART$residuals^2)
SSE3
SSE3 = sum((pred - statedata$Life.Exp)^2)#
SSE3
CART = rpart(Life.Exp ~ . , data= statedata,minbucket=5)
prp(CART)
CART = rpart(Life.Exp ~ . , data= statedata,minbucket=10)
prp(CART)
CART = rpart(Life.Exp ~ . , data= statedata,minbucket=5)
CART = rpart(Life.Exp ~ . , data= statedata,minbucket=5)
prp(CART)
pred = predict(CART)
SSE3 = sum((pred - statedata$Life.Exp)^2)
SSE3
CART2 = rpart(Life.Exp ~ Area , data= statedata,minbucket=1)
pred2 = predict(CART2)
SSE4 = sum((pred2 - statedata$Life.Exp)^2)
SSE4
prp(CART2)
library(caret)
set.seed(111)
set.seed(111)
fitControl = trainControl( method = "cv", number = 10 )
cartGrid = expand.grid( .cp = (0.1:0.50)*0.01)
train(Life.Exp ~ Area , data = statedata, method = "rpart", trControl = fitControl, tuneGrid = cartGrid )
set.seed(111)
fitControl = trainControl( method = "cv", number = 10 )
cartGrid = expand.grid( .cp = (0.1:0.50)*0.01)
train(Life.Exp ~ . , data = statedata, method = "rpart", trControl = fitControl, tuneGrid = cartGrid )
cartGrid = expand.grid( .cp = (1:50)*0.01)
train(Life.Exp ~ . , data = statedata, method = "rpart", trControl = fitControl, tuneGrid = cartGrid )
CVTree = rpart(Life.Exp ~ . , data = statedata, control=rpart.control(cp = 0.12))
prp(CVTree)
predCV = predict(CVTree)#
SSECV = sum((predCV - statedata$Life.Exp)^2)#
SSECV
set.seed(111)
fitControl = trainControl( method = "cv", number = 10 )
cartGrid = expand.grid( .cp = (1:50)*0.01)
train(Life.Exp ~ Area , data = statedata, method = "rpart", trControl = fitControl, tuneGrid = cartGrid )
CVTreeArea = rpart(Life.Exp ~ . , data = statedata, control=rpart.control(cp = 0.02))
prp(CVTreeArea)
set.seed(111)#
fitControl = trainControl( method = "cv", number = 10 )#
cartGrid = expand.grid( .cp = (1:50)*0.01) #
train(Life.Exp ~ Area , data = statedata, method = "rpart", trControl = fitControl, tuneGrid = cartGrid )#
#
CVTreeArea = rpart(Life.Exp ~ Area , data = statedata, control=rpart.control(cp = 0.02))#
prp(CVTreeArea)
predCVArea = predict(CVTreeArea)
SSECVArea = sum((predCVArea - statedata$Life.Exp)^2)
SSECVArea
census = read.csv("census.csv")
str(census)
library(caTools)
set.seed(2000)
split = sample.split(census$over50k, SplitRatio = 0.6)
train = subset(census, split==TRUE)
test = subset(census, split==FALSE)
logmodel = glm(over50k ~ . , data = train, family=binomial)
summary(logmodel)
logpredict = predict(logmodel, newdata=test, type="response")
table(test$over50k, logpredict>=0.5)
(9051+ 1888)/(9051+ 1888+1190+662)
table(test$over50k)
9713/(9713+3078)
library(ROCR)
ROCRpred = prediction(logpredict, test$over50k)
as.numeric(performance(ROCRpred, "auc")@y.values)
CART = rpart(over50k ~ . , data= train,method="class")
prp(CART)
pred = predict(CART, newdata=test)
pred = predict(CART, newdata=test,type = "class")
table(test$over50k, pred>=0.5)
pred
table( pred>=0.5)
table(test$over50k, pred)
(9243+ 1596)/(9243+ 1596+ 1482 470)
(9243+ 1596)/(9243+ 1596+ 1482+ 470)
ROCRpred = prediction(pred, test$over50k)
rpred = predict(CART, newdata=test)
ROCRpred = prediction(rpred, test$over50k)
rpred
ROCRpred = prediction(pred, test$over50k)
logpredict
rpred
rpred = predict(CART, newdata=test,type="response")
rpred = predict(CART, newdata=test,type="class")
rpred
ROCRpred = prediction(pred, test$over50k)
rpred = predict(CART, newdata=test)
ROCRpred = prediction(pred[,2], test$over50k)
PredictROC = predict(CART, newdata = test)
PredictROC
pred = prediction(PredictROC[,2], test$over50k)
perf = performance(pred, "tpr", "fpr")
plot(perf)
library(ROCR)
prp(CART)
prp(CART)
as.numeric(performance(pred, "auc")@y.values)
set.seed(1)
trainSmall = train[sample(nrow(train), 2000), ]
library(randomForest)
randomForest(over50k ~ . , data = trainSmall, ntree=200, nodesize=25 )
str(trainSmall)
randomForest(over50k ~ . -nativecountry, data = trainSmall, ntree=200, nodesize=25 )
set.seed(1)
set.seed(1)
set.seed(1)
set.seed(1)
randomForest(over50k ~ . -nativecountry, data = trainSmall, ntree=200, nodesize=25 )
(1404+ 299)/(1404+ 299+110+187)
vu = varUsed(MODEL, count=TRUE)
forest = randomForest(over50k ~ . -nativecountry, data = trainSmall, ntree=200, nodesize=25 )
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
vu = varUsed(forest, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(forest$forest$xlevels[vusorted$ix]))
varImpPlot(forest)
set.seed(2)
fitControl = trainControl( method = "cv", number = 10 )
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
train(over50k ~ . , data = train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid )
tree2 = rpart(Life.Exp ~ . , data = train, control=rpart.control(cp = 0.002))
tree2 = rpart(over50k ~ . , data = train, control=rpart.control(cp = 0.002))
pred2 = predict(tree2,newdata=test)
table(test$over50k,pred2)
table(test$over50k)
table(pred2)
pred2 = predict(tree2,newdata=test,type = "class")
table(test$over50k,pred2)
(9178+ 1838)/(9178+ 1838+ 535+ 1240)
prp(tree2)
